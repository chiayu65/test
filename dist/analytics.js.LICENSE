/******/

// expose the modules object (__webpack_modules__)

/* 0 */

/***/

/* harmony default export */

/* 1 */

/* WEBPACK VAR INJECTION */

// Store.js

// Functions to encapsulate questionable FireFox 3.6.13 behavior

// when about.config::dom.storage.enabled === false

// See https://github.com/marcuswestin/store.js/issues#issue/13

// Since #userData storage applies only to specific paths, we need to

// somehow link our data to a specific path.  We choose /favicon.ico

// as a pretty safe option, since all browsers already make a request to

// this URL anyway and being a 404 will not hurt us here.  We wrap an

// iframe pointing to the favicon in an ActiveXObject(htmlfile) object

// (see: http://msdn.microsoft.com/en-us/library/aa752574(v=VS.85).aspx)

// since the iframe access rules appear to allow direct access and

// manipulation of the document element, even for a 404 page.  This

// document can be used instead of the current document (which would

// have been limited to the current path) to perform #userData storage.

// somehow ActiveXObject instantiation failed (perhaps some special

// security settings or otherwse), fall back to per-path storage

// See http://msdn.microsoft.com/en-us/library/ms531081(v=VS.85).aspx

// and http://msdn.microsoft.com/en-us/library/ms531424(v=VS.85).aspx

// In IE7, keys cannot start with a digit or contain certain chars.

// See https://github.com/marcuswestin/store.js/issues/40

// See https://github.com/marcuswestin/store.js/issues/83

/* 2 */

// shim for using process in browser

// cached from whatever global is present so that test runners that stub it

// don't break things.  But we need to wrap it in a try catch in case it is

// wrapped in strict mode code which doesn't define any globals.  It's inside a

// function because try/catches deoptimize in certain engines.

//normal enviroments in sane situations

// if setTimeout wasn't available but was latter defined

// when when somebody has screwed with setTimeout but no I.E. maddness

// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error

// if clearTimeout wasn't available but was latter defined

// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.

// Some versions of I.E. have different rules for clearTimeout vs setTimeout

// v8 likes predictible objects

// empty string to avoid regexp issues

/* 3 */

/*
 * Module dependencies.
 */

/*, ...sources */

/*, sources */

// TODO: Replace with `partial` call?

/*
 * Exports.
 */

/* 4 */

/**
 * Module dependencies.
 */

/**
 * Set or get cookie `name` with `value` and `options` object.
 *
 * @param {String} name
 * @param {String} value
 * @param {Object} options
 * @return {Mixed}
 * @api public
 */

/**
 * Return all cookies.
 *
 * @return {Object}
 * @api private
 */

/**
 * Parse cookie `str`.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

/**
 * Encode.
 */

/**
 * Get cookie `name`.
 *
 * @param {String} name
 * @return {String}
 * @api private
 */

/**
 * Decode.
 */

/**
 * Set cookie `name` to `value`.
 *
 * @param {String} name
 * @param {String} value
 * @param {Object} options
 * @api private
 */

/* 5 */

/* harmony export (binding) */

/* unused harmony export RudderDeviceInfo */

/* unused harmony export RudderNetwork */

// Library information class

// Operating System information class

// Screen information class

// Device information class

/* 6 */

/**
 * Parse the given `url`.
 *
 * @param {String} str
 * @return {Object}
 * @api public
 */

/**
 * Return default port for `protocol`.
 *
 * @param  {String} protocol
 * @return {String}
 * @api private
 */

/**
 * Check if `url` is absolute.
 *
 * @param {String} url
 * @return {Boolean}
 * @api public
 */

/**
 * Check if `url` is relative.
 *
 * @param {String} url
 * @return {Boolean}
 * @api public
 */

/**
 * Check if `url` is cross domain.
 *
 * @param {String} url
 * @return {Boolean}
 * @api public
 */

/* 7 */

/**
 * Deeply clone an object.
 *
 * @param {*} obj Any object.
 */

// string, number, boolean, etc.

// from millermedeiros/amd-utils - MIT

/* 8 */

/*! JSON v3.3.2 | https://bestiejs.github.io/json3 | Copyright 2012-2015, Kit Cambridge, Benjamin Tan | http://kit.mit-license.org */

// Detect the `define` function exposed by asynchronous module loaders. The

// strict `define` check is necessary for compatibility with `r.js`.

// A set of types used to distinguish objects from primitives.

// Public: Initializes JSON 3 using the given `context` object, attaching the

// `stringify` and `parse` functions to the specified `exports` object.

// Native constructor aliases.

// Delegate to the native `stringify` and `parse` implementations.

// Convenience aliases.

// Internal: Contains `try...catch` logic used by other functions.

// This prevents other functions from being deoptimized.

// Test the `Date#getUTC*` methods. Based on work by @Yaffle.

// Internal: Determines whether the native `JSON.stringify` and `parse`

// implementations are spec-compliant. Based on work by Ken Snyder.

// IE <= 7 doesn't support accessing string characters using square

// bracket notation. IE 8 only supports this for primitives.

// Indicates whether both `JSON.stringify` and `JSON.parse` are

// supported.

// Indicates whether `Date`s can be serialized accurately by `JSON.stringify`.

// JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly

// serialize extended years.

// The milliseconds are optional in ES 5, but required in 5.1.

// Firefox <= 11.0 incorrectly serializes years prior to 0 as negative

// four-digit years instead of six-digit years. Credits: @Yaffle.

// Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond

// values less than 1000. Credits: @Yaffle.

// Test `JSON.stringify`.

// A test function object with a custom `toJSON` method.

// Firefox 3.1b1 and b2 serialize string, number, and boolean

// primitives as object literals.

// FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object

// literals.

// FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or

// does not define a canonical JSON representation (this applies to

// objects with `toJSON` properties as well, *unless* they are nested

// within an object or array).

// IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and

// FF 3.1b3 pass this test.

// Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,

// respectively, if the value is omitted entirely.

// FF 3.1b1, 2 throw an error if the given value is not a number,

// string, array, object, Boolean, or `null` literal. This applies to

// objects with custom `toJSON` methods as well, unless they are nested

// inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`

// methods entirely.

// Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of

// `"[null]"`.

// YUI 3.0.0b1 fails to serialize `null` literals.

// FF 3.1b1, 2 halts serialization if an array contains a function:

// `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3

// elides non-JSON values from objects and arrays, unless they

// define custom `toJSON` methods.

// Simple serialization test. FF 3.1b1 uses Unicode escape sequences

// where character escape codes are expected (e.g., `\b` => `\u0008`).

// FF 3.1b1 and b2 ignore the `filter` and `width` arguments.

// Test `JSON.parse`.

// FF 3.1b1, b2 will throw an exception if a bare literal is provided.

// Conforming implementations should also coerce the initial argument to

// a string prior to parsing.

// Simple parsing test.

// Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.

// FF 4.0 and 4.0.1 allow leading `+` signs and leading

// decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow

// certain octal literals.

// FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal

// points. These environments, along with FF 3.1b1 and 2,

// also allow trailing commas in JSON objects and arrays.

// Internal: the `Date#toJSON` implementation used to override the native one.

// Public: `JSON.stringify`. See ES 5.1 section 15.12.3.

// The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical

// results for certain dates in Opera >= 10.53.

// Tests for bugs in the current environment's `for...in` algorithm. The

// `valueOf` property inherits the non-enumerable flag from

// `Object.prototype` in older versions of IE, Netscape, and Mozilla.

// Iterate over a new instance of the `Properties` class.

// Ignore all properties inherited from `Object.prototype`.

// Normalize the iteration algorithm.

// No bugs detected; use the standard `for...in` algorithm.

// Manually invoke the callback for the `constructor` property due to

// cross-environment inconsistencies.

// A list of non-enumerable properties inherited from `Object.prototype`.

// Gecko <= 1.0 enumerates the `prototype` property of functions under

// certain conditions; IE does not.

// Manually invoke the callback for each non-enumerable property.

// Public: Serializes a JavaScript `value` as a JSON string. The optional

// `filter` argument may specify either a function that alters how object and

// array members are serialized, or an array of strings and numbers that

// indicates which properties should be serialized. The optional `width`

// argument may be either a string or number that specifies the indentation

// level of the output.

// The `|| 0` expression is necessary to work around a bug in

// Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.

// Define additional utility methods if the `Date` methods are buggy.

// Manually compute the year, month, date, hours, minutes,

// seconds, and milliseconds if the `getUTC*` methods are

// buggy. Adapted from @Yaffle's `date-shim` project.

// The hours, minutes, seconds, and milliseconds are obtained by

// decomposing the time within the day. See section 15.9.1.10.

// The `time` value specifies the time within the day (see ES

// 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used

// to compute `A modulo B`, as the `%` operator does not

// correspond to the `modulo` operation for negative numbers.

// Dates are serialized according to the `Date#toJSON` method

// specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15

// for the ISO 8601 date time string format.

// Serialize extended years correctly.

// Months, dates, hours, minutes, and seconds should have two

// digits; milliseconds should have three.

// Milliseconds are optional in ES 5.0, but required in 5.1.

// For environments with `JSON.stringify` but buggy date serialization,

// we override the native `Date#toJSON` implementation with a

// spec-compliant one.

// Exit early if value is `undefined` or `null`.

// Necessary for host object support.

// If a replacement function was provided, call it to obtain the value

// for serialization.

// Only call `getClass` if the value is an object.

// Booleans are represented literally.

// JSON numbers must be finite. `Infinity` and `NaN` are serialized as

// `"null"`.

// Strings are double-quoted and escaped.

// Recursively serialize objects and arrays.

// Check for cyclic structures. This is a linear search; performance

// is inversely proportional to the number of unique nested objects.

// Cyclic structures cannot be serialized by `JSON.stringify`.

// Add the object to the stack of traversed objects.

// Save the current indentation level and indent one additional level.

// Recursively serialize array elements.

// Recursively serialize object members. Members are selected from

// either a user-specified list of property names, or the object

// itself.

// According to ES 5.1 section 15.12.3: "If `gap` {whitespace}

// is not the empty string, let `member` {quote(property) + ":"}

// be the concatenation of `member` and the `space` character."

// The "`space` character" refers to the literal space

// character, not the `space` {width} argument provided to

// `JSON.stringify`.

// Remove the object from the traversed object stack.

// Convert the property names array into a makeshift set.

// Convert the `width` to an integer and create a string containing

// `width` number of space characters.

// Opera <= 7.54u2 discards the values associated with empty string keys

// (`""`) only if they are used directly within an object member list

// (e.g., `!("" in { "": 1})`).

// Public: Parses a JSON source string.

// Skip whitespace tokens, including tabs, carriage returns, line

// feeds, and space characters.

// Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at

// the current position.

// `"` delimits a JSON string; advance to the next character and

// begin parsing the string. String tokens are prefixed with the

// sentinel `@` character to distinguish them from punctuators and

// end-of-string tokens.

// Unescaped ASCII control characters (those with a code unit

// less than the space character) are not permitted.

// A reverse solidus (`\`) marks the beginning of an escaped

// control character (including `"`, `\`, and `/`) or Unicode

// escape sequence.

// Revive escaped control characters.

// `\u` marks the beginning of a Unicode escape sequence.

// Advance to the first character and validate the

// four-digit code point.

// A valid sequence comprises four hexdigits (case-

// insensitive) that form a single hexadecimal value.

// Invalid Unicode escape sequence.

// Revive the escaped character.

// Invalid escape sequence.

// An unescaped double-quote character marks the end of the

// string.

// Optimize for the common case where a string is valid.

// Append the string as-is.

// Advance to the next character and return the revived string.

// Unterminated string.

// Parse an integer or floating-point value.

// Parse numbers and literals.

// Advance past the negative sign, if one is specified.

// Parse the integer component.

// Leading zeroes are interpreted as octal literals.

// Illegal octal literal.

// Floats cannot contain a leading decimal point; however, this

// case is already accounted for by the parser.

// Parse the decimal component.

// Illegal trailing decimal.

// Parse exponents. The `e` denoting the exponent is

// case-insensitive.

// Parse the exponential component.

// Skip past the sign following the exponent, if one is

// specified.

// Illegal empty exponent.

// Coerce the parsed value to a JavaScript number.

// A negative sign may only precede numbers.

// `true`, `false`, and `null` literals.

// Unrecognized token.

// Return the sentinel `$` character if the parser has reached the end

// of the source string.

// Unexpected end of input.

// Remove the sentinel `@` character.

// Parse object and array literals.

// Parses a JSON array, returning a new JavaScript array.

// If the array literal contains elements, the current token

// should be a comma separating the previous element from the

// next.

// A `,` must separate each array element.

// Elisions and leading commas are not permitted.

// Unexpected token encountered.

// Parses a JSON object, returning a new JavaScript object.

// If the object literal contains members, the current token

// should be a comma separator.

// A `,` must separate each object member.

// Leading commas are not permitted, object property names must be

// double-quoted strings, and a `:` must separate each property

// name and value.

// `forOwn` can't be used to traverse an array in Opera <= 8.54

// because its `Object#hasOwnProperty` implementation returns `false`

// for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).

// Public: `JSON.parse`. See ES 5.1 section 15.12.2.

// If a JSON string contains multiple tokens, it is invalid.

// Reset the parser state.

// Export for CommonJS environments.

// Public: Restores the original value of the global `JSON` object and

// returns a reference to the `JSON3` object.

// Export for asynchronous module loaders.

/* 9 */

// This works in non-strict mode

// This works if eval is allowed (see CSP)

// This works if the window reference is available

// g can still be undefined, but nothing to do about it...

// We return undefined, instead of nothing here, so it's

// easier to handle this case. if(!global) { ...}

/* 10 */

// after first error, rest are passed to err_cb

// future error callbacks will go to error handler

/* 11 */

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

// all

// specific event

// remove all handlers

// remove specific handler

// Remove event specific arrays for event types that no

// one is subscribed for to avoid memory leak.

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

/* 12 */

/**
 * Get the top domain.
 *
 * The function constructs the levels of domain and attempts to set a global
 * cookie on each one when it succeeds it returns the top level domain.
 *
 * The method returns an empty string when the hostname is an ip or `localhost`.
 *
 * Example levels:
 *
 *      domain.levels('http://www.google.co.uk');
 *      // => ["co.uk", "google.co.uk", "www.google.co.uk"]
 *
 * Example:
 *
 *      domain('http://localhost:3000/baz');
 *      // => ''
 *      domain('http://dev:3000/baz');
 *      // => ''
 *      domain('http://127.0.0.1:3000/baz');
 *      // => ''
 *      domain('http://segment.io/baz');
 *      // => 'segment.io'
 *
 * @param {string} url
 * @return {string}
 * @api public
 */

// Lookup the real top level one.

/**
 * Levels returns all levels of the given url.
 *
 * @param {string} url
 * @return {Array}
 * @api public
 */

// Ip address.

// Localhost.

// Create levels.

/**
 * Expose cookie on domain.
 */

/* 13 */

/* harmony import */

/* 14 */

/* 15 */

// this.accountId = config.accountId;//AW-696901813

// console.log(`in script loader=== ${id}`);

// console.log("==script==", e);

// https://developers.google.com/gtagjs/reference/event

// console.log("in GoogleAdsAnalyticsManager track");

// check event could be sent

// prepare payload

// console.log("in GoogleAdsAnalyticsManager page");

/* 16 */

/* 17 */

/* 18 */

// console.log("in DV360Manager page");

/* 19 */

// Context class

// this.os = null;

// skipping version for simplicity now

// Depending on environment within which the code is executing, screen

// dimensions can be set

// User agent and locale can be retrieved only for browser

// For server-side integration, same needs to be set by calling program

// running within browser

// property name differs based on browser version

// server-side integration

/* 20 */

// Application class

/* 21 */

/**
 * toString ref.
 */

/**
 * Return the type of `val`.
 *
 * @param {Mixed} val
 * @return {String}
 * @api public
 */

// For Safari 5-7 (missing Object.prototype.constructor)

// code borrowed from https://github.com/feross/is-buffer/blob/master/index.js

/* 22 */

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

// this hackery is required for IE8/9, where

// the `console.log` function doesn't have 'apply'

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

// the final "%c" is somewhat tricky, because there could be other

// arguments passed either before or after the %c, so we need to

// figure out the correct index to insert the CSS into

// we only are interested in the *last* %c

// (the user may have provided their own)

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

// is webkit? http://stackoverflow.com/a/16459606/376773

// is firebug? http://stackoverflow.com/a/398120/376773

// is firefox >= v31?

// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

/**
 * Colors.
 */

/* 23 */

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

// define the `disabled` version

// define the `enabled` version

// set `diff` timestamp

// add the `color` if not set

// anything else let's inspect with %o

// apply any `formatters` transformations

// if we encounter an escaped % then don't increase the array index

// now we need to remove `args[index]` since it's inlined in the `format`

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

/**
 * Disable debug output.
 *
 * @api public
 */

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

// ignore empty strings

/**
 * The currently active debug mode names, and names to skip.
 */

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lowercased letter, i.e. "n".
 */

/**
 * Previously assigned color.
 */

/**
 * Previous log timestamp.
 */

/* 24 */

/**
 * Helpers.
 */

/**
 * Pluralization helper.
 */

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} options
 * @return {String|Number}
 * @api public
 */

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

/* 25 */

/**
 * Produce a new array composed of all but the first `n` elements of an input `collection`.
 *
 * @name drop
 * @api public
 * @param {number} count The number of elements to drop.
 * @param {Array} collection The collection to iterate over.
 * @return {Array} A new array containing all but the first element from `collection`.
 * @example
 * drop(0, [1, 2, 3]); // => [1, 2, 3]
 * drop(1, [1, 2, 3]); // => [2, 3]
 * drop(2, [1, 2, 3]); // => [3]
 * drop(3, [1, 2, 3]); // => []
 * drop(4, [1, 2, 3]); // => []
 */

// Preallocating an array *significantly* boosts performance when dealing with

// `arguments` objects on v8. For a summary, see:

// https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments

/* 26 */

/**
 * Produce a new array by passing each value in the input `collection` through a transformative
 * `iterator` function. The `iterator` function is passed three arguments:
 * `(value, index, collection)`.
 *
 * @name rest
 * @api public
 * @param {Array} collection The collection to iterate over.
 * @return {Array} A new array containing all but the first element from `collection`.
 * @example
 * rest([1, 2, 3]); // => [2, 3]
 */

/* 27 */

// module.parent = undefined by default

/* 28 */

/* globals __webpack_amd_options__ */

/* 29 */

/* 30 */

// If debug isn't set in LS, and we're in Electron, try to load $DEBUG

// NB: In an Electron preload script, document will be defined but not fully

// initialized. Since we know we're in Chrome, we'll just detect this case

// explicitly

// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632

// double check webkit in userAgent just in case we are in a worker

/* 31 */

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

// disabled?

// turn the `arguments` into a proper Array

// anything else let's inspect with %O

// apply env-specific formatting (colors, etc.)

// env-specific initialization logic for debug instances

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

/* 32 */

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

/* 33 */

// ESM COMPAT FLAG

// EXPORTS

/* binding */

// EXTERNAL MODULE: ./node_modules/component-url/index.js

// EXTERNAL MODULE: ./utils/logUtil.js

// CONCATENATED MODULE: ./integrations/integration_cname.js

// for sdk side native integration identification

// add a mapping from common names to index.js exported key names as identified by Rudder

// SCREEN: "screen",

// CONCATENATED MODULE: ./integrations/client_server_name.js

// from client native integration name to server identified display name

// add a mapping from Rudder identified key names to Rudder server recognizable names

// ECommerce Events Enumeration

// Enumeration for integrations supported

/**
 *
 * Utility function for UUID genration
 * @returns
 */

// Public Domain/MIT

/**
 *
 * Utility function to get current time (formatted) for including in sent_at field
 * @returns
 */

// logger.error("[Util] handleError:: ", e);

/**
 *
 *
 * @param {*} integrationObject
 */

/**
 *
 * @param {*} sdkSuppliedIntegrations
 * @param {*} configPlaneEnabledIntegrations
 */

// All true ==> intg true by default

// check if intg false supplied

// All false ==> check if intg true supplied

/**
 * reject all null values from array/object
 * @param  {} obj
 * @param  {} fn
 */

/* ------- End FlattenJson ----------- */

// EXTERNAL MODULE: ./node_modules/after/index.js

/*#__PURE__*/

// Exporting only the instance

// CONCATENATED MODULE: ./utils/storage/cookie.js

/**
 * An object utility to persist values in cookies
 */

/**
   *
   * @param {*} options
   */

// the default maxage and path

// two years

// try setting a cookie first

/**
   *
   * @param {*} key
   * @param {*} value
   */

// logger.error(e);

/**
   *
   * @param {*} key
   */

// EXTERNAL MODULE: ./node_modules/@segment/store/src/store.js

// CONCATENATED MODULE: ./utils/storage/store.js

/**
 * An object utility to persist user and other values in localstorage
 */

// CONCATENATED MODULE: ./utils/storage/storage.js

// CONCATENATED MODULE: ./utils/storage/index.js

/**
 * An object that handles persisting key-val from Analytics
 */

// First try setting the storage to cookie else to localstorage

// localStorage is enabled.

/**
   * Json stringify the given value
   * @param {*} value
   */

/**
   * JSON parse the value
   * @param {*} value
   */

// if not parseable, return as is without json parse

/**
   * trim using regex for browser polyfill
   * @param {*} value
   */

/**
   *
   * @param {*} value
   */

// console.log('set anon id: ' + value);

/**
   * get the stored userId
   */

/**
   * get the stored user traits
   */

/**
   * get stored anonymous id
   */

/**
   * get anonymous traits
   */

/**
   * get stored google analytics id
   */

/**
   * get stored facebook screen id
   */

/**
   * get stored facebook click id
   */

/**
   * get identities
   */

/**
   * set
   * @param string name
   * @param string value
   */

// logger.debug(`in script loader=== ${id}`);

// logger.debug("==parent script==", e);

// logger.debug("==adding script==", js);

// CONCATENATED MODULE: ./integrations/ScriptLoader.js

// CONCATENATED MODULE: ./integrations/FacebookPixel/index.js

// CONCATENATED MODULE: ./integrations/FacebookPixel/browser.js

// console.log("===in init FacebookPixel===");

// disables automatic pageview tracking

// enables fb

// console.log("in FBPixel isLoaded");

// console.log("in FBPixel isReady");

// is using alias to send event

// CONCATENATED MODULE: ./integrations/CyntelliPixel/browser.js

// CONCATENATED MODULE: ./integrations/CyntelliPixel/index.js

// console.log("===in init CyntelliPixel===");

// console.log("in Cyntelli Pixel isLoaded");

// console.log("in Cyntelli Pixel isReady");

// console.log('Cyntelli send page event');

// EXTERNAL MODULE: ./integrations/GoogleAds/index.js

// CONCATENATED MODULE: ./integrations/ElandPixel/index.js

// CONCATENATED MODULE: ./integrations/ElandPixel/browser.js

// console.log("===in init ELAND_PIXEL ===");

//"adgeek",

//"footer",

// CONCATENATED MODULE: ./integrations/LinePixel/browser.js

// CONCATENATED MODULE: ./integrations/LinePixel/index.js

//AW-696901813

// console.log(`in script loader=== LINE tag`);

// console.log("in LinePixel track");

// console.log("in LinePixel page");

// CONCATENATED MODULE: ./integrations/CompassPixel/browser.js

// CONCATENATED MODULE: ./integrations/CompassPixel/index.js

// console.log("===in init CompassPixel ===");

// console.log("in CompassPixel page");

// this.track(rudderElement);

// CONCATENATED MODULE: ./integrations/AmobeePixel/browser.js

// CONCATENATED MODULE: ./integrations/AmobeePixel/index.js

// console.log("===in init AmobeePixel===");

// console.log("in Amobee Pixel isLoaded");

// console.log("in Amobee Pixel isReady");

// EXTERNAL MODULE: ./integrations/DV360Pixel/index.js

// CONCATENATED MODULE: ./integrations/index.js

// the key names should match the destination.name value to keep partity everywhere

// (config-plan name, native destination.name , exported integration name(this one below))

// CONCATENATED MODULE: ./integrations/BingPixel/browser.js

// console.log("===in init BingPixel===");

// console.log("in BingPixel (" + this.queueName + ") isLoaded");

// console.log("in BingPixel(" + this.queueName + ") isReady");

// 增加轉換價值

// console.log(payload, ev);

// CONCATENATED MODULE: ./integrations/BingPixel/index.js

// CONCATENATED MODULE: ./integrations/YahooPixel/browser.js

// this.advId = config.advId;

// console.log("===in init YahooPixel (" + this.queueName + ") ===");

// console.log("in YahooPixel (" + this.pixelId + ") isLoaded");

// console.log("in YahooPixel (" + this.queueName + ") isReady");

// let payload = {el: 'evId:' + msg.messageId, advertiser_id: this.advId};

// conversion value

// CONCATENATED MODULE: ./integrations/YahooPixel/index.js

// CONCATENATED MODULE: ./integrations/GA4Pixel/browser.js

// console.log("[GA4] identify:: method not supported");

// console.log('[GA4] identify');

// console.log("in GA4 track");

// set trasaction id

// set value

// console.log("in GA4 page");

// CONCATENATED MODULE: ./integrations/GA4Pixel/index.js

// CONCATENATED MODULE: ./integrations/ClickForcePixel/browser.js

/* Website track (tracker.js) - B.I.DMP By ClickForce */

// console.log('[CLICKFORCE_PIXEL] identify');

//action: "CFgeneratelead_INFINITI_CV",

//category: "generatelead",

//clickforce_rtid("9967001");

//  cft("setSiteId", "CF-230800137287");

// CONCATENATED MODULE: ./integrations/ClickForcePixel/index.js

// EXTERNAL MODULE: ./utils/RudderContext.js

// CONCATENATED MODULE: ./utils/CyntelliMessage.js

// Core message class with default values

// By default, all integrations will be set as enabled from client

// Decision to route to specific destinations will be taken at server end

// Get property

// Add property

// Validate whether this message is semantically valid for the type mentioned

// First check that properties is populated

// Event type specific checks

// check if event is present

// Next make specific checks for e-commerce events

// if category is not there, set to event

// Function for checking existence of a particular property

// CONCATENATED MODULE: ./utils/CyntelliElement.js

// Individual element class containing Rudder Message

// Setters that in turn set the field values for the contained object

// CONCATENATED MODULE: ./utils/CyntelliElementBuilder.js

// Class responsible for building up the individual elements in a batch

// that is transmitted by the SDK

// Set the property

// set User properties

// Setter methods for all variables. Instance is returned for each call in

// accordance with the Builder pattern

// CONCATENATED MODULE: ./analytics.js

// import logger from "./utils/logUtil";

/**
 * consts
 */

// logger.debug("=====from analytics array, calling method:: " + method);

// new instance

/**
 * class responsible for handling core
 * event tracking functionalities
 */

/**
   * Creates an instance of Analytics.
   * @memberof Analytics
   */

/**
   * initializeUser
   */

// get ga id

// get fbp, fbc id

// save once for storing older values to encrypted

/**
   * Call control pane to get client configs
   *
   * @param {*} clientId
   * @memberof Analytics
   */

// logger.debug("inside load");

// validate writeKye

// Upper cap on maximum delay for an event

// minimum delay before sending an event

// exponentional base

// max attempts

// prepare anonymousId

// fetch config

// load integrtion

/**
 *
 * Utility function to retrieve configuration JSON from server
 * @param {*} context
 * @param {*} url
 * @param {*} callback
 */

// server-side integration, XHR is node module

// console.log(uri);

// logger.debug("status 200 " + "calling callback");

// process again new push elements

/**
   * Process the response from control plane and
   * call initialize for integrations
   *
   * @param {*} status
   * @param {*} response
   * @memberof Analytics
   */

// logger.debug(`===in process response=== ${status}`);

// logger.debug(

//   `Destination ${index} Enabled? ${destination.enabled} Type: ${destination.destinationDefinition.name} Use Native SDK? true`

// );

// logger.debug("this.clientIntegrations: ", this.clientIntegrations);

// intersection of config-plane native sdk destinations with sdk load time destination list

// remove from the list which don't have support yet in SDK

// logger.debug("===handling config BE response processing error===");

//   "autoTrackHandlersRegistered",

//   this.autoTrackHandlersRegistered

/**
   * Initialize integrations by addinfg respective scripts
   * keep the instances reference in core
   *
   * @param {*} intgArray
   * @returns
   * @memberof Analytics
   */

// logger.debug("supported intgs ", integrations);

// this.clientIntegrationObjects = [];

//   "[Analytics] init :: trying to initialize integration name:: ",

//   intg.name

// logger.debug("initializing destination: ", intg);

// logger.error(

//   "[Analytics] initialize integration (integration.init()) failed :: ",

//   "===replay events called====",

//   " successfully loaded count: ",

//   object.successfullyLoadedIntegration.length,

//   " failed loaded count: ",

//   object.failedToBeLoadedIntegration.length

// eslint-disable-next-line no-param-reassign

//   "==registering after callback===",

//   " after to be called after count : ",

//   object.clientIntegrationObjects.length

// logger.debug("==registering ready callback===");

// logger.debug("===looping over each successful integration====");

// logger.debug("===letting know I am ready=====", intg.name);

// send the queued events to the fetched integration

// convert common names to sdk identified name

// get intersection between config plane native enabled destinations

// (which were able to successfully load on the page) vs user supplied integrations

// send to all integrations now from the 'toBeProcessedByIntegrationArray' replay queue

/**
   * prepare promise for particular instance
   */

// logger.debug('isInit', instance.isLoaded());

// logger.debug("===integration loaded successfully====", instance.name);

// logger.debug("====max wait over====");

// if (this.sendAdblockPage && category != "RudderJS-Initiated") {

//   this.sendSampleRequest();

// }

// logger.debug("inside alias");

// logger.debug("inside reset");

//   "registerCallbacks",

//   methodName,

//   this.clientSuppliedCallbacks[methodName]

// logger.debug("inside registerCallbacks");

// logger.debug(search);

// if (!this.loaded) return;

/**
   * Sets anonymous id in the followin precedence:
   * 1. anonymousId: Id directly provided to the function.
   * 2. rudderAmpLinkerParm: value generated from linker query parm (rudderstack)
   *    using praseLinker util.
   * 3. generateUUID: A new uniquie id is generated and assigned.
   *
   * @param {string} anonymousId
   * @param {string} rudderAmpLinkerParm
   */

/**
   * get identity
   */

/**
   * Send page call to Rudder BE and to initialized integrations
   *
   * @param {*} category
   * @param {*} name
   * @param {*} properties
   * @param {*} options
   * @param {*} callback
   * @memberof Analytics
   */

/**
   * Send track call to Rudder BE and to initialized integrations
   *
   * @param {*} event
   * @param {*} properties
   * @param {*} options
   * @param {*} callback
   * @memberof Analytics
   */

// console.log('props @ processTrack', properties);

// console.log('element @ processTrack', rudderElement);

/**
   * Page call supporting ruddrElement from builder
   *
   * @param {*} rudderElement
   * @param {*} callback
   * @memberof Analytics
   */

/**
   * Track call supporting rudderelement from builder
   *
   * @param {*} rudderElement
   * @param {*} callback
   * @memberof Analytics
   */

/**
   * process options parameter
   * Apart from top level keys merge everyting under context
   * context.page's default properties are overriden by same keys of
   * provided properties in case of page call
   *
   * @param {*} rudderElement
   * @param {*} options
   * @memberof Analytics
   */

// this.addCampaignInfo(rudderElement);

// assign page properties to context.page

// Assign page properties to context.page if the same property is not provided under context.page

/**
   * Process and send data to destinations along with rudder BE
   *
   * @param {*} type
   * @param {*} rudderElement
   * @param {*} callback
   * @memberof Analytics
   */

// assign page properties to context

// logger.debug("anonymousId: " + this.anonymousId);

// rudderElement.message.properties = this.removeEmptyName(rudderElement.message.properties);

// structure user supplied integrations object to rudder format

// try to first send to all integrations, if list populated from BE

// logger.debug(rudderElement);

// config plane native enabled destinations, still not completely loaded

// in the page, add the events to a queue and process later

// logger.debug("pushing in replay queue");

// new event processing after analytics initialized  but integrations not fetched from BE

// convert integrations object to server identified names, kind of hack now!

// logger.debug(`${type} is called `);

/**
   * remove name by empty value
   */

// emiiter instance

// add error handler

// if (process.browser) {

// test for adblocker

// instance.sendSampleRequest()

// initialize supported callbacks

// register supported callbacks

// set version

// exchange to internal variable

// check initial start from load

// run load and shift this task

// logger.debug("=====from init, calling method:: " + method);

// once loaded, parse querystring of the page url to send events

// process the others tasks

// add listener of cyntellianalytics.push

// expose the module cache

// define getter function for harmony exports

// define __esModule on exports

// create a fake namespace object

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// getDefaultExport function for compatibility with non-harmony modules

// Object.prototype.hasOwnProperty.call

// __webpack_public_path__

// The require function

// Check if module is in cache

// Create a new module (and put it into the cache)

// Execute the module function

// Return the exports of the module

// Flag the module as loaded

/************************************************************************/
